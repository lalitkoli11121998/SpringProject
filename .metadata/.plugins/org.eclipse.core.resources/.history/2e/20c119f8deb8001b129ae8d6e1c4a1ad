package com.luv2code.springdemo.controller.aspect;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.aspectj.lang.reflect.MethodSignature;
import org.springframework.stereotype.Component;

import com.luv2code.aopdemo.Account;
import com.sun.istack.logging.Logger;

@Aspect
@Component
public class CRMLoggingAspect {
	
	//settup a looger
	private Logger mylogger =
			Logger.getLogger(getClass().getName(), null);	
	
   //setupt a pointcut
	
	@Pointcut("execution(* com.luv2code.springdemo.controller.*.*(..))")
	private void forControllerPackage() {}
	
	
	//do the same for server and dao
	@Pointcut("execution(* com.luv2code.springdemo.service.*.*(..))")
	private void forServicePackage() {}
	
	@Pointcut("execution(* com.luv2code.springdemo.dao.*.*(..))")
	private void forDaoPackage() {}
	
	@Pointcut("forControllerPackage() || forServicePackage() || forDaoPackage()")
	private void forAppflow() {}
	
	//add @before advice
	
	@Before("forAppflow()") // 
	//to read the parameter which pass in the pointcut methods we use joinpoint
	public void beforeAccountAdvice(JoinPoint thejoinpoint) {
		mylogger.info("=====> execution @Befor advice add acount");
		
		//diplay the method signature
		MethodSignature methodsignature = (MethodSignature)thejoinpoint.getSignature();
		mylogger.info("method :" + methodsignature);
		
		//display the method arguments
		
		// get args
		Object []args = thejoinpoint.getArgs();
		
		//loop the arg
		for(Object arg : args) {
			mylogger.info(arg.toString());
			if(arg instanceof Account) {
				Account theAccount = (Account)arg;
				mylogger.info("account name :" + theAccount.getName());
				mylogger.info("account level :" + theAccount.getLevel());
			}
		}
	}

	
	
	
	
	
	
	
	
}
